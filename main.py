import asyncio
import logging
import os
import requests
import xml.etree.ElementTree as ET
import openai
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot_log.txt'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "487591931"))
CHANNEL_ID = os.getenv("CHANNEL_ID", "@myttoy66")
YML_URL = os.getenv("YML_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

keyboard = [
    [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", callback_data="next")],
    [InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞", callback_data="pause"), InlineKeyboardButton("‚úÖ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="resume")],
    [InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤", callback_data="queue")],
    [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast")],
    [InlineKeyboardButton("üìÑ –õ–æ–≥", callback_data="log")],
    [InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data="status")],
    [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="skip")],
]
menu = InlineKeyboardMarkup(keyboard)
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI (–≤—Å–µ–≥–¥–∞)
def generate_short_description(name: str, description: str = "") -> str:
    try:
        prompt = (
            f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –ü–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=60,
            temperature=0.7,
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return description or "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ YML-—Ñ–∞–π–ª–∞
def fetch_products_from_yml():
    try:
        response = requests.get(YML_URL)
        response.raise_for_status()
        tree = ET.fromstring(response.content)

        products = []
        for offer in tree.findall(".//offer"):
            name = offer.findtext("name")
            price = offer.findtext("price")
            picture = offer.findtext("picture")
            url = offer.findtext("url")
            description = offer.findtext("description") or ""

            if not picture or not price or float(price) < 300:
                continue

            generated = generate_short_description(name, description)
            products.append({
                "name": name,
                "price": float(price),
                "picture": picture,
                "url": url,
                "description": generated
            })

        return products

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YML: {e}")
        return []
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞–Ω–∞–ª
async def post_product_to_channel(context: ContextTypes.DEFAULT_TYPE):
    global product_queue
    if not product_queue:
        product_queue = fetch_products_from_yml()
        if not product_queue:
            logger.warning("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            return

    product = product_queue.pop(0)

    caption = f"<b>{product['name']}</b>\n\n{product['description']}\n\n–¶–µ–Ω–∞: {int(product['price'])}‚ÇΩ"
    button = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=product['url'])]])

    await context.bot.send_photo(
        chat_id=CHANNEL_ID,
        photo=product["picture"],
        caption=caption,
        parse_mode="HTML",
        reply_markup=button
    )

# –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=menu)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    query = update.callback_query
    await query.answer()

    if query.data == "next":
        await post_product_to_channel(context)
    elif query.data == "pause":
        scheduler.pause()
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=menu)
    elif query.data == "resume":
        scheduler.resume()
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=menu)
    elif query.data == "queue":
        await query.edit_message_text(f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(product_queue)}", reply_markup=menu)
    elif query.data == "log":
        try:
            with open("bot_log.txt", "r", encoding="utf-8") as f:
                log_content = f.readlines()[-10:]
            await query.edit_message_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n" + "".join(log_content), reply_markup=menu)
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}", reply_markup=menu)
    elif query.data == "status":
        is_paused = scheduler.state == 0
        await query.edit_message_text(f"–°—Ç–∞—Ç—É—Å: {'‚è∏ –ü–∞—É–∑–∞' if is_paused else '‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–µ–Ω'}", reply_markup=menu)
    elif query.data == "skip":
        if product_queue:
            skipped = product_queue.pop(0)
            await query.edit_message_text(f"–¢–æ–≤–∞—Ä ¬´{skipped['name']}¬ª –ø—Ä–æ–ø—É—â–µ–Ω.", reply_markup=menu)
        else:
            await query.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", reply_markup=menu)
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤
async def handle_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.bot_data["queue"]:
        queue_text = "\n\n".join(
            [f"{i+1}. {item['name']} ‚Äì {item['price']}‚ÇΩ" for i, item in enumerate(context.bot_data["queue"][:10])]
        )
        await update.callback_query.message.reply_text(f"–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤:\n\n{queue_text}", reply_markup=menu)
    else:
        await update.callback_query.message.reply_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", reply_markup=menu)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞
async def handle_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("bot_log.txt", "r") as log_file:
            lines = log_file.readlines()[-30:]
            await update.callback_query.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:\n\n" + "".join(lines), reply_markup=menu)
    except Exception as e:
        await update.callback_query.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}", reply_markup=menu)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def handle_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = len(context.bot_data.get("queue", []))
    status = "–ê–∫—Ç–∏–≤–µ–Ω" if context.bot_data.get("status") else "–ù–∞ –ø–∞—É–∑–µ"
    await update.callback_query.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n–¢–æ–≤–∞—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {total}",
        reply_markup=menu
    )

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    await update.message.reply_text("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=menu)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    context = application.bot_data
    context["queue"] = fetch_products_from_yml()
    context["status"] = True

    scheduler = AsyncIOScheduler()
    scheduler.add_job(post_product, CronTrigger(hour=12, minute=0), args=[context])
    scheduler.start()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_buttons))

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
