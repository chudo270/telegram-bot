import nest_asyncio
import asyncio
import logging
import os
import requests
import xml.etree.ElementTree as ET
import openai
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot_log.txt'
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "487591931"))
CHANNEL_ID = os.getenv("CHANNEL_ID", "@myttoy66")
YML_URL = os.getenv("YML_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

keyboard = [
    [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", callback_data="next")],
    [InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞", callback_data="pause"), InlineKeyboardButton("‚úÖ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="resume")],
    [InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤", callback_data="queue")],
    [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast")],
    [InlineKeyboardButton("üìÑ –õ–æ–≥", callback_data="log")],
    [InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data="status")],
    [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="skip")],
]
menu = InlineKeyboardMarkup(keyboard)
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI
def generate_short_description(name: str, description: str = "") -> str:
    try:
        prompt = (
            f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –ü–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=60,
            temperature=0.7,
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return description or "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ YML
def fetch_products_from_yml():
    try:
        response = requests.get(YML_URL)
        response.raise_for_status()
        tree = ET.fromstring(response.content)

        products = []
        for offer in tree.findall(".//offer"):
            name = offer.findtext("name")
            price = offer.findtext("price")
            picture = offer.findtext("picture")
            url = offer.findtext("url")
            description = offer.findtext("description") or ""

            if not picture or not price or float(price) < 300:
                continue

            generated = generate_short_description(name, description)
            products.append({
                "name": name,
                "price": float(price),
                "picture": picture,
                "url": url,
                "description": generated
            })

        return products

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YML: {e}")
        return []
# –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞–Ω–∞–ª
async def post_product_to_channel(context: ContextTypes.DEFAULT_TYPE):
    queue = context.bot_data.get("queue", [])
    if not queue:
        logger.warning("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
        queue = fetch_products_from_yml()
        context.bot_data["queue"] = queue
        if not queue:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.")
            return

    product = queue.pop(0)

    caption = f"<b>{product['name']}</b>\n\n{product['description']}\n\n–¶–µ–Ω–∞: {int(product['price'])}‚ÇΩ"
    button = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=product['url'])]])

    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=product["picture"],
            caption=caption,
            parse_mode="HTML",
            reply_markup=button
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    query = update.callback_query
    await query.answer()

    data = query.data
    queue = context.bot_data.get("queue", [])

    if data == "next":
        await post_product_to_channel(context)
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä.", reply_markup=menu)

    elif data == "pause":
        context.bot_data["paused"] = True
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É.", reply_markup=menu)

    elif data == "resume":
        context.bot_data["paused"] = False
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=menu)

    elif data == "queue":
        text = "\n\n".join(
            [f"{i+1}. {item['name']} ‚Äì {item['price']}‚ÇΩ" for i, item in enumerate(queue[:10])]
        ) if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
        await query.edit_message_text(text, reply_markup=menu)

    elif data == "log":
        try:
            with open("bot_log.txt", "r", encoding="utf-8") as f:
                lines = f.readlines()[-10:]
            await query.edit_message_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n" + "".join(lines), reply_markup=menu)
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}", reply_markup=menu)

    elif data == "status":
        paused = context.bot_data.get("paused", False)
        status = "‚è∏ –ü–∞—É–∑–∞" if paused else "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–µ–Ω"
        await query.edit_message_text(f"–°—Ç–∞—Ç—É—Å: {status}", reply_markup=menu)

    elif data == "skip":
        if queue:
            skipped = queue.pop(0)
            await query.edit_message_text(f"–ü—Ä–æ–ø—É—â–µ–Ω: {skipped['name']}", reply_markup=menu)
        else:
            await query.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", reply_markup=menu)
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    context = application.bot_data

    # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    context["queue"] = fetch_products_from_yml()
    context["paused"] = False

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    scheduler = AsyncIOScheduler()

    def job_wrapper():
        if not context.get("paused", False):
            return asyncio.create_task(post_product_to_channel(context))
        else:
            logger.info("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –ø–∞—É–∑–µ.")

    scheduler.add_job(job_wrapper, CronTrigger(hour=12, minute=0))
    scheduler.start()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_buttons))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    import asyncio
    asyncio.run(main())
