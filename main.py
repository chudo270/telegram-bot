import os
import asyncio
import logging
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@mytoy66"
ADMIN_ID = 487591931

YML_URL = "https://mytoy66.ru/integration?int=avito&name=avitoo"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
awaiting_broadcast = False
paused = False
products_cache = []
product_index = 0

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename="bot.log",
    filemode="a"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async def fetch_products():
    global products_cache
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(YML_URL) as response:
                text = await response.text()
                # –ü–æ–∫–∞ –ø—Ä–∏–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∑–¥–µ—Å—å –ø–∞—Ä—Å–∏–Ω–≥ YML –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                products_cache = [{"name": "–ü—Ä–∏–º–µ—Ä", "price": 500, "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "picture": "https://via.placeholder.com/300"}]
                logging.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: %d", len(products_cache))
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: %s", str(e))
        products_cache = []

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞
async def send_product(context: ContextTypes.DEFAULT_TYPE, product: dict):
    try:
        message = f"<b>{product['name']}</b>\n–¶–µ–Ω–∞: {product['price']}‚ÇΩ\n\n{product['description']}"
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=product['picture'],
            caption=message,
            parse_mode="HTML"
        )
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: %s", product['name'])
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞: %s", str(e))

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
async def post_product(context: ContextTypes.DEFAULT_TYPE = None):
    global product_index, paused

    if paused or not products_cache:
        logging.info("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    if product_index >= len(products_cache):
        product_index = 0

    product = products_cache[product_index]
    await send_product(context, product)
    product_index += 1

# –ö–æ–º–∞–Ω–¥—ã Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", callback_data="next")],
        [InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞", callback_data="pause"), InlineKeyboardButton("‚úÖ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="resume")],
        [InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤", callback_data="queue")],
        [InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast")],
        [InlineKeyboardButton("üìÑ –õ–æ–≥", callback_data="log")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global awaiting_broadcast, paused

    if update.effective_user.id != ADMIN_ID:
        return

    text = update.message.text

    if text == "üì® –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        awaiting_broadcast = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞.")
    elif text == "üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤":
        await update.message.reply_text(f"–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤: {len(products_cache) - product_index}")
    elif text == "‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç":
        await post_product(context)
    elif text == "‚è∏ –ü–∞—É–∑–∞":
        paused = True
        await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    elif text == "‚úÖ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å":
        paused = False
        await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    elif text == "üìÑ –õ–æ–≥":
        if os.path.exists("bot.log"):
            with open("bot.log", "rb") as f:
                await context.bot.send_document(chat_id=ADMIN_ID, document=f, filename="bot.log")
        else:
            await update.message.reply_text("–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif awaiting_broadcast:
        awaiting_broadcast = False
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –ü–ª–∞–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
async def schedule_daily_post():
    await post_product()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await fetch_products()

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(schedule_daily_post, "cron", hour=12, minute=0)
    scheduler.add_job(post_product, "interval", minutes=60)
    scheduler.start()

    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
