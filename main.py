import logging
import os
import requests
import xml.etree.ElementTree as ET
import asyncio
import datetime
from pytz import timezone
from aiohttp import web

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN         = os.getenv("BOT_TOKEN")
YML_URL           = "https://cdn.mysitemapgenerator.com/shareapi/yml/16046306746_514"
GIGACHAT_AUTH_KEY = os.getenv("GIGACHAT_AUTH_KEY")
CHANNEL_ID        = "@myttoy66"
ADMIN_ID          = 487591931

POST_TIME_HOUR = 12
POST_TIME_MINUTE = 0
ZONE = timezone("Europe/Moscow")

# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ======
product_queue = []
paused = False

main_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π",   callback_data="next")],
    [InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞",        callback_data="pause"),
     InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="resume")],
    [InlineKeyboardButton("üì¶ –û—á–µ—Ä–µ–¥—å",      callback_data="queue"),
     InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",   callback_data="skip")],
    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å",       callback_data="status"),
     InlineKeyboardButton("üìù –õ–æ–≥–∏",         callback_data="log")],
    [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞",     callback_data="broadcast")],
    [InlineKeyboardButton("üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å",    callback_data="ai")]
])

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ YML ======
def load_products_from_yml(yml_url):
    try:
        r = requests.get(yml_url)
        r.raise_for_status()
        root = ET.fromstring(r.content)
        prods = []
        for offer in root.findall(".//offer"):
            price = offer.findtext("price")
            pic   = offer.findtext("picture")
            name  = offer.findtext("name")
            url   = offer.findtext("url")
            desc  = offer.findtext("description", "")
            if price and pic:
                try:
                    price_i = int(float(price))
                    if price_i >= 300:
                        prods.append({
                            "id":          offer.attrib.get("id"),
                            "name":        name,
                            "price":       price_i,
                            "picture":     pic,
                            "url":         url,
                            "description": desc
                        })
                except ValueError:
                    continue
        global product_queue
        product_queue = prods
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(prods)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YML: {e}")

def load_products_from_sources():
    load_products_from_yml(YML_URL)

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è ======
def generate_description(name, description):
    try:
        prompt = f"–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {name}"
        if description:
            prompt += f" –∏ –æ–ø–∏—Å–∞–Ω–∏—é: {description}"
        headers = {
            "Authorization": f"Bearer {GIGACHAT_AUTH_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "GigaChat",
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, —Å–æ–∑–¥–∞—é—â–∏–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è."},
                {"role": "user",   "content": prompt}
            ],
            "temperature": 1.0,
            "top_p":       0.9,
            "n":           1
        }
        resp = requests.post(
            "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
            json=payload, headers=headers
        )
        resp.raise_for_status()
        return resp.json()['choices'][0]['message']['content'].strip()
    except Exception as e:
        logger.warning(f"GigaChat error: {e}")
        return "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ —Ö–æ—Ä–æ—à–µ–π —Ü–µ–Ω–µ!"

# ====== –ü—É–±–ª–∏–∫–∞—Ü–∏—è ======
async def publish_next_product(bot):
    global paused, product_queue
    if paused or not product_queue:
        return
    p = product_queue.pop(0)
    text = (
        f"<b>{p['name']}</b>\n\n"
        f"{generate_description(p['name'], p.get('description',''))}\n\n"
        f"<b>{p['price']} ‚ÇΩ</b>"
    )
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=p['url'])]])
    try:
        await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=p['picture'],
            caption=text,
            parse_mode="HTML",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# ====== –î–µ–∫–æ—Ä–∞—Ç–æ—Ä ======
def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(update, context)
    return wrapper

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@admin_only
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("‚ñ∂Ô∏è next"), KeyboardButton("‚è∏ pause"), KeyboardButton("‚ñ∂ resume")],
        [KeyboardButton("üìã queue"), KeyboardButton("üì§ broadcast")],
        [KeyboardButton("üß† –Ω–µ–π—Ä–æ—Å–µ—Ç—å"), KeyboardButton("ü™µ log")],
        [KeyboardButton("‚ÑπÔ∏è status"), KeyboardButton("‚è≠ skip")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:", reply_markup=reply_markup)

@admin_only
async def cmd_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_next_product(context.bot)
    await update.message.reply_text("–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

@admin_only
async def cmd_pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global paused
    paused = True
    await update.message.reply_text("–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

@admin_only
async def cmd_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global paused
    paused = False
    await update.message.reply_text("–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

@admin_only
async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = "–ü–∞—É–∑–∞" if paused else "–ê–∫—Ç–∏–≤–µ–Ω"
    await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å: {status}\n–û—á–µ—Ä–µ–¥—å: {len(product_queue)} —Ç–æ–≤–∞—Ä–æ–≤")

@admin_only
async def cmd_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ñ—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram.")

@admin_only
async def cmd_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not product_queue:
        await update.message.reply_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return
    preview = "\n".join([f"{i+1}. {p['name']}" for i, p in enumerate(product_queue[:10])])
    await update.message.reply_text(f"–û—á–µ—Ä–µ–¥—å —Ç–æ–≤–∞—Ä–æ–≤:\n\n{preview}")

@admin_only
async def cmd_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if product_queue:
        skipped = product_queue.pop(0)
        await update.message.reply_text(f"–ü—Ä–æ–ø—É—â–µ–Ω: {skipped['name']}")
    else:
        await update.message.reply_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

@admin_only
async def cmd_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        caption = update.message.caption or ""
        photo = update.message.photo[-1].file_id
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=caption)
    elif update.message.text:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=update.message.text)
    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")

@admin_only
async def cmd_neuro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = generate_description("–ò–≥—Ä—É—à–µ—á–Ω—ã–π —Ä–æ–±–æ—Ç", "–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ–±–æ—Ç —Å –ø—É–ª—å—Ç–æ–º –î–£")
    await update.message.reply_text(f"–û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n\n{text}")

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ======
async def initialize_product_queue():
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, load_products_from_sources)

# ====== MAIN —Å –≤–µ–±—Ö—É–∫–æ–º ======
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.Regex("^‚ñ∂Ô∏è next$"), cmd_next))
    app.add_handler(MessageHandler(filters.Regex("^‚è∏ pause$"), cmd_pause))
    app.add_handler(MessageHandler(filters.Regex("^‚ñ∂ resume$"), cmd_resume))
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è status$"), cmd_status))
    app.add_handler(MessageHandler(filters.Regex("^ü™µ log$"), cmd_log))
    app.add_handler(MessageHandler(filters.Regex("^üìã queue$"), cmd_queue))
    app.add_handler(MessageHandler(filters.Regex("^‚è≠ skip$"), cmd_skip))
    app.add_handler(MessageHandler(filters.Regex("^üì§ broadcast$"), cmd_broadcast))
    app.add_handler(MessageHandler(filters.Regex("^üß† –Ω–µ–π—Ä–æ—Å–µ—Ç—å$"), cmd_neuro))

    await initialize_product_queue()

    # webhook URL
    webhook_url = "https://worker-production-c8d5.up.railway.app/webhook"
    await app.bot.set_webhook(url=webhook_url)

    # AIOHTTP —Å–µ—Ä–≤–µ—Ä
    async def handle(request):
        request_data = await request.json()
        update = Update.de_json(request_data, app.bot)
        await app.process_update(update)
        return web.Response()

    app_ = web.Application()
    app_.router.add_post("/webhook", handle)

    runner = web.AppRunner(app_)
    await runner.setup()

    PORT = int(os.getenv("PORT", 8443))
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    print(f"Webhook –∑–∞–ø—É—â–µ–Ω –Ω–∞ {webhook_url}")

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())