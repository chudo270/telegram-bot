import logging
import os
import requests
import xml.etree.ElementTree as ET
import asyncio

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN         = os.getenv("BOT_TOKEN")
YML_URL           = "https://cdn.mysitemapgenerator.com/shareapi/yml/16046306746_514"
GIGACHAT_AUTH_KEY = os.getenv("GIGACHAT_AUTH_KEY")
CHANNEL_ID        = "@myttoy66"
ADMIN_ID          = 487591931

# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ======
product_queue = []
paused = False

main_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π",   callback_data="next")],
    [InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞",        callback_data="pause"),
     InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="resume")],
    [InlineKeyboardButton("üì¶ –û—á–µ—Ä–µ–¥—å",      callback_data="queue"),
     InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",   callback_data="skip")],
    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å",       callback_data="status"),
     InlineKeyboardButton("üìù –õ–æ–≥–∏",         callback_data="log")],
    [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞",     callback_data="broadcast")],
    [InlineKeyboardButton("üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å",    callback_data="ai")]
])

# ====== –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ ======
def load_products_from_yml(yml_url):
    try:
        r = requests.get(yml_url)
        r.raise_for_status()
        root = ET.fromstring(r.content)
        prods = []
        for offer in root.findall(".//offer"):
            price = offer.findtext("price")
            pic   = offer.findtext("picture")
            name  = offer.findtext("name")
            url   = offer.findtext("url")
            desc  = offer.findtext("description", "")
            if price and pic:
                try:
                    price_i = int(float(price))
                    if price_i >= 300:
                        prods.append({
                            "id":          offer.attrib.get("id"),
                            "name":        name,
                            "price":       price_i,
                            "picture":     pic,
                            "url":         url,
                            "description": desc
                        })
                except ValueError:
                    continue
        global product_queue
        product_queue = prods
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(prods)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YML: {e}")

def load_products_from_sources():
    load_products_from_yml(YML_URL)

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è ======
def generate_description(name, description):
    try:
        prompt = f"–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {name}"
        if description:
            prompt += f" –∏ –æ–ø–∏—Å–∞–Ω–∏—é: {description}"
        headers = {
            "Authorization": f"Bearer {GIGACHAT_AUTH_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "GigaChat",
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, —Å–æ–∑–¥–∞—é—â–∏–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è."},
                {"role": "user",   "content": prompt}
            ],
            "temperature": 1.0,
            "top_p":       0.9,
            "n":           1
        }
        resp = requests.post(
            "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
            json=payload, headers=headers
        )
        resp.raise_for_status()
        return resp.json()['choices'][0]['message']['content'].strip()
    except Exception as e:
        logger.warning(f"GigaChat error: {e}")
        return "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ —Ö–æ—Ä–æ—à–µ–π —Ü–µ–Ω–µ!"
        # ====== –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ ======
async def publish_next_product(bot):
    global paused, product_queue
    if paused or not product_queue:
        return
    p = product_queue.pop(0)
    text = (
        f"<b>{p['name']}</b>\n\n"
        f"{generate_description(p['name'], p.get('description',''))}\n\n"
        f"<b>{p['price']} ‚ÇΩ</b>"
    )
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=p['url'])]])
    try:
        await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=p['picture'],
            caption=text,
            parse_mode="HTML",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# ====== Handlers –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ======
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.", reply_markup=main_menu)

async def pause_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global paused
    if update.effective_user.id != ADMIN_ID:
        return
    paused = True
    if update.callback_query:
        await update.callback_query.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu)

async def resume_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global paused
    if update.effective_user.id != ADMIN_ID:
        return
    paused = False
    if update.callback_query:
        await update.callback_query.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu)

async def next_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if update.callback_query:
        await update.callback_query.answer()
    await publish_next_product(ctx.bot)

async def show_queue(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = f"–í –æ—á–µ—Ä–µ–¥–∏: {len(product_queue)} —Ç–æ–≤–∞—Ä–æ–≤."
    if update.callback_query:
        await update.callback_query.answer(text)
    else:
        await update.message.reply_text(text, reply_markup=main_menu)

async def show_logs(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        with open("bot.log", "r") as log_file:
            logs = ''.join(log_file.readlines()[-10:])
        if update.callback_query:
            await update.callback_query.answer()
            await ctx.bot.send_message(chat_id=update.effective_user.id, text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{logs}")
        else:
            await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n{logs}", reply_markup=main_menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        if update.callback_query:
            await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏.")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏.", reply_markup=main_menu)

async def broadcast_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = update.message.text.replace("/broadcast", "").strip()
    if not text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /broadcast", reply_markup=main_menu)
        return
    try:
        await ctx.bot.send_message(chat_id=CHANNEL_ID, text=text)
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.", reply_markup=main_menu)

async def skip_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.callback_query.answer("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä‚Ä¶")
    await publish_next_product(ctx.bot)

async def status_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    status = "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if paused else "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω–æ"
    await update.callback_query.answer(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}", show_alert=True)

async def ai_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.callback_query.answer("–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # ‚Äî CommandHandlers
    application.add_handler(CommandHandler("start",     start))
    application.add_handler(CommandHandler("pause",     pause_cmd))
    application.add_handler(CommandHandler("resume",    resume_cmd))
    application.add_handler(CommandHandler("next",      next_cmd))
    application.add_handler(CommandHandler("queue",     show_queue))
    application.add_handler(CommandHandler("log",       show_logs))
    application.add_handler(CommandHandler("broadcast", broadcast_cmd))

    # ‚Äî CallbackQueryHandlers
    application.add_handler(CallbackQueryHandler(pause_cmd,     pattern="^pause$"))
    application.add_handler(CallbackQueryHandler(resume_cmd,    pattern="^resume$"))
    application.add_handler(CallbackQueryHandler(next_cmd,      pattern="^next$"))
    application.add_handler(CallbackQueryHandler(skip_cmd,      pattern="^skip$"))
    application.add_handler(CallbackQueryHandler(show_queue,    pattern="^queue$"))
    application.add_handler(CallbackQueryHandler(show_logs,     pattern="^log$"))
    application.add_handler(CallbackQueryHandler(broadcast_cmd, pattern="^broadcast$"))
    application.add_handler(CallbackQueryHandler(status_cmd,    pattern="^status$"))
    application.add_handler(CallbackQueryHandler(ai_cmd,        pattern="^ai$"))

    # ‚Äî Scheduler
    scheduler = AsyncIOScheduler()
    scheduler.add_job(load_products_from_sources, "interval", hours=1)
    scheduler.add_job(
        lambda: asyncio.create_task(publish_next_product(application.bot)),
        "cron", hour=12, minute=0, timezone="Europe/Moscow"
    )
    scheduler.start()

    # ‚Äî –ó–∞–ø—É—Å–∫ polling + —Å–±—Ä–æ—Å —Å—Ç–∞—Ä–æ–≥–æ webhook
    application.run_polling().

if __name__ == "__main__":
    main()