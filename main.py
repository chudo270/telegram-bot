import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import logging
import html_parser  # —Ç–≤–æ–π –º–æ–¥—É–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å HTML
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7766369540:AAGKLs-BDwavHlN6dr9AUHWIeIhdJLq5nM0"
ADMIN_ID = 487591931
CHANNEL_ID = "@myttoy66"
WEBHOOK_PATH = "/webhook/myttoy66"
WEBHOOK_URL = f"https://worker-production-c8d5.up.railway.app{WEBHOOK_PATH}"

# –û—á–µ—Ä–µ–¥—å —Ç–æ–≤–∞—Ä–æ–≤
queue = []
is_paused = False

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next")],
        [InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞", callback_data="pause")],
        [InlineKeyboardButton("‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume")],
        [InlineKeyboardButton("üìã –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("‚úç –ù–∞–ø–∏—Å–∞—Ç—å", callback_data="write")],
        [InlineKeyboardButton("üßæ –õ–æ–≥–∏", callback_data="log")]
    ])

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=get_main_keyboard())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global is_paused
    query = update.callback_query
    await query.answer()
    data = query.data

    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    if data == "next":
        await post_next_item(context)
    elif data == "pause":
        is_paused = True
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_main_keyboard())
    elif data == "resume":
        is_paused = False
        await query.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_main_keyboard())
    elif data == "status":
        status = "–ü–∞—É–∑–∞" if is_paused else "–ê–∫—Ç–∏–≤–µ–Ω"
        await query.edit_message_text(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤: {len(queue)}", reply_markup=get_main_keyboard())
    elif data == "log":
        await query.edit_message_text("–õ–æ–≥ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", reply_markup=get_main_keyboard())
    elif data == "write":
        context.user_data["awaiting_ad"] = True
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª.", reply_markup=get_main_keyboard())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if context.user_data.get("awaiting_ad"):
        text = update.message.text
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
        context.user_data["awaiting_ad"] = False
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())

# –ü–∞—Ä—Å–∏–Ω–≥ HTML
async def load_products():
    global queue
    queue = await html_parser.get_products()
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(queue)}")

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è
async def post_next_item(context: ContextTypes.DEFAULT_TYPE):
    global queue
    if is_paused or not queue:
        return
    item = queue.pop(0)
    text = f"<b>{item['name']}</b>\n{item['price']} ‚ÇΩ\n\n{item['description']}"
    buttons = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=item["link"])]])
    await context.bot.send_photo(chat_id=CHANNEL_ID, photo=item["image"], caption=text, parse_mode="HTML", reply_markup=buttons)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def schedule_posts(app: Application):
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(lambda: app.create_task(post_next_item(app.bot)), trigger='cron', hour=12, minute=0)
    scheduler.start()

# Webhook –∑–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    await load_products()
    schedule_posts(app)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
    await app.bot.set_webhook(WEBHOOK_URL)
    await app.run_webhook(
        listen="0.0.0.0",
        port=8080,
        webhook_path=WEBHOOK_PATH,
        url_path=WEBHOOK_PATH,
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if str(e).startswith("This event loop is already running"):
            import nest_asyncio
            nest_asyncio.apply()
            asyncio.get_event_loop().run_until_complete(main())
