import telegram
import logging
import asyncio
import requests
import random
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
BOT_TOKEN = "7766369540:AAGKLs-BDwavHlN6dr9AUHWIeIhdJLq5nM0"
CHANNEL_ID = "@myttoy66"  # –£–∫–∞–∂–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª
ADMIN_ID = 487591931

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API Moguta
MOGUTA_DOMAIN = "https://mytoy66.ru"
API_TOKEN = "565df1b1313ac458b0ef1a7ef16c4bc4"
SECRET_KEY = "mySecretKey12345"

# –†–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
YML_URL = "https://mytoy66.ru/integration?int=avito&name=avitoo"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
product_queue = []
paused = False
log_messages = []

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
def generate_description(title: str) -> str:
    return f"–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä: {title}. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è –≤–∞—Å!"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Moguta API
def fetch_products_from_api():
    url = f"{MOGUTA_DOMAIN}/api/products?userToken={API_TOKEN}&inJSON=true"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        products = data.get("data", {}).get("catalog", [])
        valid_products = []

        for product in products:
            title = product.get("title")
            price = product.get("price")
            image = product.get("image_url") or product.get("images", [None])[0]
            description = product.get("description") or generate_description(title)
            url = f"{MOGUTA_DOMAIN}/{product.get('category_url', '')}/{product.get('url', '')}"

            if not image or not title or not price:
                continue

            valid_products.append({
                "title": title,
                "price": price,
                "description": description,
                "image": image,
                "url": url
            })

        return valid_products
    except Exception as e:
        log_messages.append(f"[{datetime.now()}] –û—à–∏–±–∫–∞ API: {e}")
        return []

# –†–µ–∑–µ—Ä–≤: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ YML
def fetch_products_from_yml():
    try:
        response = requests.get(YML_URL)
        if response.ok:
            # –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ YML, –Ω–æ —É–ø—Ä–æ—â–∞–µ–º
            return []
    except Exception as e:
        log_messages.append(f"[{datetime.now()}] –û—à–∏–±–∫–∞ YML: {e}")
    return []

# –ü–æ—Å—Ç–∏–Ω–≥ –≤ Telegram
async def post_product(context: CallbackContext = None):
    global product_queue, paused

    if paused or not product_queue:
        return

    product = product_queue.pop(0)
    text = f"*{product['title']}*\n\n{product['description']}\n\n–¶–µ–Ω–∞: {product['price']}‚ÇΩ"
    buttons = [[InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=product['url'])]]
    reply_markup = InlineKeyboardMarkup(buttons)

    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=product['image'],
            caption=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        log_messages.append(f"[{datetime.now()}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product['title']}")
    except Exception as e:
        log_messages.append(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next"),
         InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞", callback_data="pause")],
        [InlineKeyboardButton("‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume"),
         InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìã –õ–æ–≥", callback_data="log")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global paused
    query = update.callback_query
    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        return

    if query.data == "next":
        await post_product(context)
    elif query.data == "pause":
        paused = True
        await query.edit_message_text("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    elif query.data == "resume":
        paused = False
        await query.edit_message_text("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω.")
    elif query.data == "status":
        msg = f"–ü–∞—É–∑–∞: {'–î–∞' if paused else '–ù–µ—Ç'}\n–¢–æ–≤–∞—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(product_queue)}"
        await query.edit_message_text(msg)
    elif query.data == "log":
        log_text = "\n".join(log_messages[-10:]) or "–õ–æ–≥ –ø—É—Å—Ç."
        await query.edit_message_text(log_text)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
def load_products():
    products = fetch_products_from_api()
    if not products:
        products = fetch_products_from_yml()
    random.shuffle(products)
    return products

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    global product_queue
    product_queue = load_products()

    app = Application.builder().token(BOT_TOKEN).build()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(post_product, CronTrigger(hour=12, minute=0), args=[app.bot])
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^/next$"), lambda u, c: post_product(c)))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^/pause$"), lambda u, c: set_pause(True)))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^/resume$"), lambda u, c: set_pause(False)))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^/status$"), status))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^/log$"), log))
    app.add_handler(MessageHandler(filters.ALL, lambda u, c: None))  # –≥–ª—É—à–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ

    from telegram.ext import CallbackQueryHandler  # –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

    app.add_handler(CallbackQueryHandler(button_handler))


    await app.run_polling()

# –•–µ–ª–ø-—Ñ—É–Ω–∫—Ü–∏–∏
def set_pause(state: bool):
    global paused
    paused = state

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    msg = f"–ü–∞—É–∑–∞: {'–î–∞' if paused else '–ù–µ—Ç'}\n–¢–æ–≤–∞—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(product_queue)}"
    await update.message.reply_text(msg)

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = "\n".join(log_messages[-10:]) or "–õ–æ–≥ –ø—É—Å—Ç."
    await update.message.reply_text(text)

if __name__ == "__main__":
    import nest_asyncio
nest_asyncio.apply()
asyncio.get_event_loop().run_until_complete(main())

