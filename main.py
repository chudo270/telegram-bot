import logging
import asyncio
import os
import requests
import xml.etree.ElementTree as ET
from datetime import time

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    Application
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
BOT_TOKEN = os.getenv("BOT_TOKEN")
YML_URL = "https://cdn.mysitemapgenerator.com/shareapi/yml/16046306746_514"
GIGACHAT_AUTH_KEY = os.getenv("GIGACHAT_AUTH_KEY")
CHANNEL_ID = "@myttoy66"
ADMIN_ID = 487591931

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
product_queue = []
paused = False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next")],
    [InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞", callback_data="pause"),
     InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="resume")],
    [InlineKeyboardButton("üì¶ –û—á–µ—Ä–µ–¥—å", callback_data="queue"),
     InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")],
    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
     InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="log")],
    [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
    [InlineKeyboardButton("üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å", callback_data="ai")]
])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ YML
def load_products_from_yml(yml_url):
    try:
        response = requests.get(yml_url)
        if response.status_code == 200:
            root = ET.fromstring(response.content)
            products = []
            for offer in root.findall(".//offer"):
                price = offer.findtext("price")
                picture = offer.findtext("picture")
                name = offer.findtext("name")
                url = offer.findtext("url")
                category = offer.findtext("categoryId")
                description = offer.findtext("description", "")
                if price and picture:
                    try:
                        price = int(float(price))
                        if price >= 300:
                            products.append({
                                "id": offer.attrib.get("id"),
                                "name": name,
                                "price": price,
                                "picture": picture,
                                "url": url,
                                "category": category,
                                "description": description
                            })
                    except ValueError:
                        continue
            global product_queue
            product_queue = products
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YML: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ YML: {e}")
    return []

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
def load_products_from_sources():
    load_products_from_yml(YML_URL)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ GigaChat
def generate_description(name, description):
    try:
        prompt = f"–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {name}"
        if description:
            prompt += f" –∏ –æ–ø–∏—Å–∞–Ω–∏—é: {description}"

        headers = {
            "Authorization": f"Bearer {GIGACHAT_AUTH_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "GigaChat",
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, —Å–æ–∑–¥–∞—é—â–∏–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 1.0,
            "top_p": 0.9,
            "n": 1
        }

        response = requests.post(
            "https://gigachat.devices....bank.ru/api/v1/chat/completions",
            json=payload,
            headers=headers
        )
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content'].strip()
        else:
            logging.warning(f"GigaChat –æ—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")

    return "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ —Ö–æ—Ä–æ—à–µ–π —Ü–µ–Ω–µ!"

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞–Ω–∞–ª
async def publish_next_product(context: ContextTypes.DEFAULT_TYPE):
    global paused, product_queue
    if paused or not product_queue:
        return

    product = product_queue.pop(0)
    title = f"<b>{product['name']}</b>"
    price = f"<b>{product['price']} ‚ÇΩ</b>"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    generated_description = generate_description(
        product['name'],
        product.get("description", "")
    )

    text = f"{title}\n\n{generated_description}\n\n{price}"
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=product['url'])]
    ])

    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=product['picture'],
            caption=text,
            reply_markup=buttons,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")

# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.", reply_markup=main_menu)

async def next_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await publish_next_product(context)

async def pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global paused
    if update.effective_user.id != ADMIN_ID:
        return
    paused = True
    await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu)

async def resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global paused
    if update.effective_user.id != ADMIN_ID:
        return
    paused = False
    await update.message.reply_text("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    state = "‚è∏ –ü–∞—É–∑–∞" if paused else "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–µ–Ω"
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {state}", reply_markup=main_menu)

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text("–õ–æ–≥–∏ –Ω–µ –≤–µ–¥—É—Ç—Å—è. –í—Å–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ.", reply_markup=main_menu)

async def show_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text(
        f"–í –æ—á–µ—Ä–µ–¥–∏: {len(product_queue)} —Ç–æ–≤–∞—Ä–æ–≤.",
        reply_markup=main_menu
    )

# –†–∞—Å—Å—ã–ª–∫–∞
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    context.user_data["broadcast_mode"] = True
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID or not context.user_data.get("broadcast_mode"):
        return

    context.user_data["broadcast_mode"] = False
    if update.message.photo:
        # —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å
        photo = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=caption)
    else:
        # –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await context.bot.send_message(chat_id=CHANNEL_ID, text=update.message.text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "next":
        await publish_next_product(context)
    elif action == "pause":
        await pause(update, context)
    elif action == "resume":
        await resume(update, context)
    elif action == "queue":
        await show_queue(update, context)
    elif action == "status":
        await status(update, context)
    elif action == "log":
        await log(update, context)
    elif action == "skip":
        if product_queue:
            skipped = product_queue.pop(0)
            await query.edit_message_text(
                f"–ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä: {skipped['name']}",
                reply_markup=main_menu
            )
        else:
            await query.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", reply_markup=main_menu)
    elif action == "broadcast":
        context.user_data["broadcast_mode"] = True
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def build_application():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pause", pause))
    application.add_handler(CommandHandler("resume", resume))
    application.add_handler(CommandHandler("next", next_product))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("log", log))
    application.add_handler(CommandHandler("queue", show_queue))
    application.add_handler(CommandHandler("broadcast", broadcast_start))
    application.add_handler(MessageHandler(filters.ALL, broadcast_message))
    application.add_handler(CallbackQueryHandler(button_callback))

    return application

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(application: Application):
    load_products_from_sources()
    start_scheduler(application)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def start_scheduler(application: Application):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        lambda: application.create_task(publish_next_product(application)),
        trigger='cron',
        hour=12,
        minute=0,
        timezone='Europe/Moscow'
    )
    scheduler.start()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    app = build_application()
    await app.initialize()
    await on_startup(app)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –≤ Telegram
    await app.bot.set_webhook(f"{WEBHOOK_URL}/{BOT_TOKEN}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTTP‚Äë—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –æ—Ç Telegram
    PORT = int(os.environ.get("PORT", 8080))
    await app.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url_path=f"/{BOT_TOKEN}"
    )
    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await app.idle()

if __name__ == "__main__":
    asyncio.run(main())
     except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
